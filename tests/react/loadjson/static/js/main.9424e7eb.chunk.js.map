{"version":3,"sources":["data.js","Stocks.js","App.js","serviceWorker.js","index.js"],"names":["stockData","company","ticker","stockPrice","timeElapsed","Stocks","className","map","data","key","HomePageHeader","Stock","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kKAAaA,G,UAAY,CACvB,CACEC,QAAS,cACTC,OAAQ,OACRC,WAAY,YACZC,YAAa,aAEf,CACEH,QAAS,aACTC,OAAQ,KACRC,WAAY,YACZC,YAAa,cAEf,CACEH,QAAS,cACTC,OAAQ,OACRC,WAAY,aACZC,YAAa,aAEf,CACEH,QAAS,aACTC,OAAQ,MACRC,WAAY,WACZC,YAAa,aAEf,CACEH,QAAS,YACTC,OAAQ,OACRC,WAAY,aACZC,YAAa,cAEf,CACEH,QAAS,cACTC,OAAQ,OACRC,WAAY,aACZC,YAAa,gB,OC/BJC,EAAS,WACpB,OACE,qCACE,cAAC,EAAD,IACA,qBAAKC,UAAU,kBAAf,SACGN,EAAUO,KAAI,SAACC,EAAMC,GACpB,OACE,8BACE,cAAC,EAAD,CAEER,QAASO,EAAKP,QACdC,OAAQM,EAAKN,OACbC,WAAYK,EAAKL,WACjBC,YAAaI,EAAKJ,aAJbK,IAFCA,YAgBhBC,EAAiB,WACrB,OACE,wBAAQJ,UAAU,SAAlB,SACE,uDAKAK,EAAQ,SAAC,GAAkD,IAAhDV,EAA+C,EAA/CA,QAASC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,YAC5C,OAAKH,EAEH,gCACE,gCACE,+BACE,6BACE,6BAAKA,MAEP,6BACE,6BAAKC,MAEP,6BACE,6BAAKC,MAEP,6BACE,4BAAIC,aAfO,yBCxBRQ,MARf,WACE,OACE,qBAAKN,UAAU,MAAf,SACE,cAAC,EAAD,OCKcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9424e7eb.chunk.js","sourcesContent":["export const stockData = [\n  {\n    company: \"Twitter Inc\",\n    ticker: \"TWTR\",\n    stockPrice: \"22.76 USD\",\n    timeElapsed: \"5 sec ago\"\n  },\n  {\n    company: \"Square Inc\",\n    ticker: \"SQ\",\n    stockPrice: \"45.28 USD\",\n    timeElapsed: \"10 sec ago\"\n  },\n  {\n    company: \"Shopify Inc\",\n    ticker: \"SHOP\",\n    stockPrice: \"341.79 USD\",\n    timeElapsed: \"3 sec ago\"\n  },\n  {\n    company: \"Sunrun Inc\",\n    ticker: \"RUN\",\n    stockPrice: \"9.87 USD\",\n    timeElapsed: \"4 sec ago\"\n  },\n  {\n    company: \"Adobe Inc\",\n    ticker: \"ADBE\",\n    stockPrice: \"300.99 USD\",\n    timeElapsed: \"10 sec ago\"\n  },\n  {\n    company: \"HubSpot Inc\",\n    ticker: \"HUBS\",\n    stockPrice: \"115.22 USD\",\n    timeElapsed: \"12 sec ago\"\n  }\n];\n","import React from \"react\";\nimport \"./App.css\";\nimport { stockData } from \"./data\";\n\nexport const Stocks = () => {\n  return (\n    <>\n      <HomePageHeader />\n      <div className=\"stock-container\">\n        {stockData.map((data, key) => {\n          return (\n            <div key={key}>\n              <Stock\n                key={key}\n                company={data.company}\n                ticker={data.ticker}\n                stockPrice={data.stockPrice}\n                timeElapsed={data.timeElapsed}\n              />\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n};\n\nconst HomePageHeader = () => {\n  return (\n    <header className=\"header\">\n      <h2>Your Stock Tracker</h2>\n    </header>\n  );\n};\n\nconst Stock = ({ company, ticker, stockPrice, timeElapsed }) => {\n  if (!company) return <div />;\n  return (\n    <table>\n      <tbody>\n        <tr>\n          <td>\n            <h5>{company}</h5>\n          </td>\n          <td>\n            <h5>{ticker}</h5>\n          </td>\n          <td>\n            <h4>{stockPrice}</h4>\n          </td>\n          <td>\n            <p>{timeElapsed}</p>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { Stocks } from \"./Stocks\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Stocks />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}